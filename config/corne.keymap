/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// LAYERS

#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUNC    3

// MACROS

#define SUPER LC(LSHIFT)
#define SUPER2 LA(LC(LSHIFT))

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&hm RGUI SEMI>, <&kp SQT>;
        };

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LCTRL TAB>, <&kp ESC>;
        };
    };

    combos { compatible = "zmk,combos"; };

    macros {
        lock_screen: lock_screen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp LEFT_CONTROL &kp Q>;
            label = "LOCK_SCREEN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC              &kp Q  &kp W  &kp E         &kp R  &kp T        &kp Y      &kp U  &kp I      &kp O    &kp P          &kp BACKSPACE
&hm LEFT_SHIFT CAPS  &kp A  &kp S  &kp D         &kp F  &kp G        &kp H      &kp J  &kp K      &kp L    &kp SEMICOLON  &kp SINGLE_QUOTE
&kp LCTRL            &kp Z  &kp X  &kp C         &kp V  &kp B        &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH       &bt BT_NXT
                                   &kp LEFT_GUI  &mo 1  &kp SPACE    &kp ENTER  &mo 2  &kp RALT
            >;
        };

        sym_layer {
            bindings = <
&none  &none  &none  &none   &none   &none     &kp EXCL     &kp AT     &kp HASH       &kp LPAR  &kp RPAR  &kp AMPERSAND
&none  &none  &none  &none   &none   &none     &kp PERCENT  &kp CARET  &kp ASTERISK   &kp LBKT  &kp RBKT  &kp GRAVE
&none  &none  &none  &none   &none   &none     &kp MINUS    &kp EQUAL  &kp BACKSLASH  &kp LBRC  &kp RBRC  &none
                     &trans  &trans  &trans    &trans       &mo 3      &trans
            >;
        };

        num_layer {
            bindings = <
&none  &none  &kp N1  &kp N2  &kp N3  &none     &none   &none     &kp UP_ARROW  &none      &none  &none
&none  &none  &kp N4  &kp N5  &kp N6  &none     &none   &kp LEFT  &kp DOWN      &kp RIGHT  &none  &none
&none  &none  &kp N7  &kp N8  &kp N9  &none     &none   &none     &none         &none      &none  &none
                      &kp N0  &mo 3   &trans    &trans  &trans    &trans
            >;
        };

        func_layer {
            bindings = <
&kp F1           &kp F2           &kp F3           &kp F4           &kp F5           &kp F6             &kp F7             &kp F8           &kp F9      &kp F10     &kp F11  &kp F12
&rgb_ug RGB_ON   &rgb_ug RGB_OFF  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE  &none       &none    &none
&rgb_ug RGB_EFF  &none            &none            &none            &bt BT_NXT       &bt BT_CLR         &bl BL_ON          &bl BL_OFF       &bl BL_INC  &bl BL_DEC  &none    &lock_screen
                                                   &sys_reset       &trans           &bootloader        &bootloader        &trans           &sys_reset
            >;
        };
    };
};
